AWSTemplateFormatVersion: '2010-09-09'
Description: |
  ABC TSM KMS Stack
Parameters:
  NodeAWSAccount:
    Type: String
    Description: The AWS account where the TSM node is deployed.
    AllowedPattern: '^\d{12}$'
    ConstraintDescription: Must be a valid AWS account ID. Ensure that it is the AWS account of the Builder Vault that you will allow to access the node.
  Namespace:
    Type: String
    MaxLength: 30
    AllowedPattern: '^[a-z]*$'
    ConstraintDescription: Must be up to 30 characters, and can only include lowercase letters.
    Description: A Unique namespace for the Builder Vault.
    Default: abcdev
  NodeIndex:
    Type: String
    Description: The index of the node. This must correspond to the Builder Vault node index that this key will be used for.
    AllowedValues:
    - "1"
    - "2"
  DeletePolicy:
    Type: String
    Default: Delete
    AllowedValues:
    - Delete
    - Retain
    Description: |
      The policy to apply when the stack is deleted. Only use Delete if you
      want to delete the resources created by this stack. Retain will keep the resources
      and you will have to manually delete them.
  BlockdaemonPCR8:
    Type: String
    Description: The Blockdaemon PCR8 to use for the Builder Vault
    Default: e6d548020e7e2aa4bd5d9cb79b83dca88859d538f308d74d8b5d0955556c12d828565c3ad7f7513dee21fc6d5bd80cbb

Resources:
  NodeKMSKeyNitro:
    DeletionPolicy: !Sub ${DeletePolicy}
    UpdateReplacePolicy: !Sub ${DeletePolicy}
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for encrypting resources
      EnableKeyRotation: true
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: account-permissions
        Statement:
          - Sid: Enable Access for Root
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:CancelKeyDeletion
              - kms:Create*
              - kms:Delete*
              - kms:Describe*
              - kms:Disable*
              - kms:Enable*
              - kms:Get*
              - kms:List*
              - kms:Put*
              - kms:Revoke*
              - kms:ScheduleKeyDeletion
              - kms:TagResource
              - kms:UntagResource
              - kms:Update*
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
            Resource: "*"
          - Sid: Restricted Access for Target Account
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${NodeAWSAccount}:root
            Action:
              - kms:Encrypt
            Resource: "*"
          - Sid: Allow Decrypt for Builder Vault
            Action: kms:Decrypt
            Condition:
              StringEqualsIgnoreCase:
                kms:RecipientAttestation:PCR8: !Ref BlockdaemonPCR8
              StringEquals:
                aws:PrincipalTag/EnclaveName: !Sub node-${NodeIndex}
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${NodeAWSAccount}:root
            Resource: "*"
  NodeSecretManagerKMSKey:
    DeletionPolicy: !Sub ${DeletePolicy}
    UpdateReplacePolicy: !Sub ${DeletePolicy}
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for encrypting secrets manager secrets. This is only used for secrets manager cross account access.
      EnableKeyRotation: true
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: account-permissions
        Statement:
          - Sid: Enable Access for Root
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: "*"
          - Sid: Restricted Access for Target Account
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${NodeAWSAccount}:root
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
              - kms:DescribeKey
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Sub ${NodeAWSAccount}
                kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com

  NodeAdminBucket:
    DeletionPolicy: !Sub ${DeletePolicy}
    UpdateReplacePolicy: !Sub ${DeletePolicy}
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Namespace}-${AWS::AccountId}-${AWS::Region}-node-${NodeIndex}-bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  NodeAdminBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NodeAdminBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: CrossAccountConfigAccess
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${NodeAWSAccount}:root
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Sub "${NodeAdminBucket.Arn}/node-${NodeIndex}/config.toml"
          - Sid: AuditLogs
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${NodeAWSAccount}:root
            Action:
              - s3:PutObject
            Resource:
              - !Sub "${NodeAdminBucket.Arn}/node-${NodeIndex}/audit-logs/*"

  NodeBootstrapParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/blockdaemon/${Namespace}/node-bootstrap-parameter-${NodeIndex}"
      Tier: Advanced
      Type: String
      # value will be a json string of the KMS key id, the secrets manager location of the api keys, and the secrets manager location of the master encryption key
      Value: !Sub >
        {
          "NITRO_KMS_KEY_ID": "${NodeKMSKeyNitro.Arn}",
          "CONFIG_BUCKET": "${NodeAdminBucket}",
          "DB_ENCRYPTOR_MASTER_PASSWORD_SECRET_ARN": "${NodeMasterEncryptionKey}",
          "NODE_KMS_KEY_SECRETS_MANAGER_ARN": "${NodeSecretManagerKMSKey.Arn}",
          "SIGNING_KEY_SECRET": "${NodeSigningKey}",
          "AUDIT_LOG_BUCKET": "${NodeAdminBucket}",
          "API_KEY_SECRET_ARN": "${NodeAPIKey}",
          "API_KEY_HASH_SECRET_ARN": "${NodeAPIKeyHash}"
        }

  NodeSSMParameterShare:
    Type: AWS::RAM::ResourceShare
    Properties:
      Name: !Sub "${Namespace}-node-ssm-parameter-share-${NodeIndex}"
      Principals:
        - !Ref NodeAWSAccount
      ResourceArns:
        - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${NodeBootstrapParameter}"
      AllowExternalPrincipals: true
      Tags:
        - Key: "Name"
          Value: !Sub "${Namespace}-node-ssm-parameter-share"

  NodeAPIKeyHash:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: !Sub ${DeletePolicy}
    UpdateReplacePolicy: !Sub ${DeletePolicy}
    Properties:
      Name: !Sub "builder-vault-${Namespace}-secret-api-key-hash-node-${NodeIndex}"
      Description: "KMS Encrypted API Key Hash for builder vault. This is the hashed key for usage on the tsm node."
      KmsKeyId: !Ref NodeSecretManagerKMSKey
      GenerateSecretString:
        PasswordLength: 1
        RequireEachIncludedType: False

  NodeAPIKeyHashResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref NodeAPIKeyHash
      ResourcePolicy: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "${NodeAWSAccount}"
              },
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": "${NodeAPIKeyHash}",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/EnclaveName": "node-${NodeIndex}"
                }
              }
            }
          ]
        }

  NodeAPIKey:
    DeletionPolicy: !Sub ${DeletePolicy}
    UpdateReplacePolicy: !Sub ${DeletePolicy}
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "builder-vault-${Namespace}-secret-api-keys-node-${NodeIndex}"
      Description: !Sub "API Key for builder vault node ${NodeIndex}"
      KmsKeyId: !Ref NodeSecretManagerKMSKey
      GenerateSecretString:
        PasswordLength: 1
        RequireEachIncludedType: False

  NodeAPIKeySecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref NodeAPIKey
      ResourcePolicy: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "${NodeAWSAccount}"
              },
              "Action": [
                "secretsmanager:UpdateSecret"
              ],
              "Resource": "${NodeAPIKey}",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/EnclaveName": "node-${NodeIndex}"
                }
              }
            }
          ]
        }

  NodeMasterEncryptionKey:
    DeletionPolicy: !Sub ${DeletePolicy}
    UpdateReplacePolicy: !Sub ${DeletePolicy}
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "builder-vault-${Namespace}-master-encryption-key-node-${NodeIndex}"
      Description: !Sub DB master encryptor password for builder vault node ${NodeIndex}"
      KmsKeyId: !Ref NodeSecretManagerKMSKey
      GenerateSecretString:
        PasswordLength: 1
        RequireEachIncludedType: False
      Tags:
        - Key: Namespace
          Value: !Sub ${Namespace}
        - Key: NodeIndex
          Value: !Sub ${NodeIndex}

  NodeMasterEncryptionKeySecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref NodeMasterEncryptionKey
      ResourcePolicy: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "${NodeAWSAccount}"
              },
              "Action": [
                "secretsmanager:UpdateSecret",
                "secretsmanager:GetSecretValue"
              ],
              "Resource": "${NodeMasterEncryptionKey}",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/EnclaveName": "node-${NodeIndex}"
                }
              }
            }
          ]
        }

  NodeSigningKey:
    DeletionPolicy: !Sub ${DeletePolicy}
    UpdateReplacePolicy: !Sub ${DeletePolicy}
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "builder-vault-${Namespace}-secret-signing-key-node-${NodeIndex}"
      Description: !Sub "Signing Key for builder vault node ${NodeIndex}"
      KmsKeyId: !Ref NodeSecretManagerKMSKey
      GenerateSecretString:
        PasswordLength: 10
        RequireEachIncludedType: False
        
  NodeSigningKeySecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref NodeSigningKey
      ResourcePolicy: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "${NodeAWSAccount}"
              },
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": "${NodeSigningKey}",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/EnclaveName": "node-${NodeIndex}"
                }
              }
            }
          ]
        }
  APIKeyCustomResource:
    Type: Custom::TsmNodeKeys
    Properties:
      ServiceToken: !Sub ${BuilderVaultAPIKeyCreatorFunction.Arn}
      NodeAPIKeySecretArn: !Sub ${NodeAPIKey}
      NodeAPIKeyHashSecretArn: !Sub ${NodeAPIKeyHash}
      NitroKMSKeyId: !Sub ${NodeKMSKeyNitro.Arn}
      SigningKeySecretArn: !Sub ${NodeSigningKey}

  BuilderVaultAPIKeyCreatorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BuilderVaultAPIKeyCreatorFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:GenerateDataKey
                  - kms:DescribeKey
                  - kms:ReEncrypt
                Resource:
                  - !Sub ${NodeKMSKeyNitro.Arn}
                  - !Sub ${NodeSecretManagerKMSKey.Arn}
              - Effect: Allow
                Action:
                  - secretsmanager:PutSecretValue
                Resource:
                  - !Sub ${NodeAPIKey}
                  - !Sub ${NodeAPIKeyHash}
                  - !Sub ${NodeSigningKey}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
  BuilderVaultAPIKeyCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt BuilderVaultAPIKeyCreatorFunctionRole.Arn
      Runtime: python3.11
      Timeout: 20
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import base64
          from hashlib import sha256
          import uuid

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          secret_client = boto3.client("secretsmanager")
          kms_client = boto3.client("kms")


          def lambda_handler(event, context):
              LOGGER.info(f"Received api key generation event: {event}")
              resource_properties = event.get("ResourceProperties", None)
              if event["RequestType"] == "Delete":
                  LOGGER.info("DELETE! (noop)")
                  cfnresponse.send(
                      event, context, "SUCCESS", {"Message": "Resource deletion successful!"}
                  )
                  return
              elif event["RequestType"] == "Update":
                  LOGGER.info("UPDATE! (noop)")
                  cfnresponse.send(
                      event, context, "SUCCESS", {"Message": "Resource update successful!"}
                  )
              elif event["RequestType"] == "Create":
                  LOGGER.info("CREATE!")
                  signing_key_secret_arn = resource_properties["SigningKeySecretArn"]
                  api_key_secret_arn = resource_properties["NodeAPIKeySecretArn"]
                  api_key_hash_secret_arn = resource_properties["NodeAPIKeyHashSecretArn"]
                  nitro_kms_key = resource_properties["NitroKMSKeyId"]

                  # create API key and API key hash
                  api_key = str(uuid.uuid4())
                  api_key_hash = base64.b64encode(sha256(api_key.encode("utf-8")).digest())
                  response = kms_client.encrypt(KeyId=nitro_kms_key, Plaintext=api_key_hash)
                  encrypted_api_key_hash = base64.b64encode(response["CiphertextBlob"])
                  secret_client.put_secret_value(
                      SecretId=api_key_secret_arn, SecretString=api_key
                  )
                  secret_client.put_secret_value(
                      SecretId=api_key_hash_secret_arn,
                      SecretString=encrypted_api_key_hash.decode(),
                  )

                  # create signing key
                  signing_key_response = kms_client.generate_data_key(
                      KeyId=nitro_kms_key, KeySpec="AES_256"
                  )
                  # decode response and turn into string
                  decoded_signing_key_response = base64.b64encode(
                      signing_key_response["CiphertextBlob"]
                  )
                  secret_client.put_secret_value(
                      SecretId=signing_key_secret_arn,
                      SecretString=decoded_signing_key_response.decode(),
                  )
                  cfnresponse.send(
                      event, context, "SUCCESS", {"Message": "Resource create successful!"}
                  )

Outputs:
  SSMParameter:
    Description: The SSM Parameter for the Builder Vault to consume
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${NodeBootstrapParameter}"
  BuilderVaultNamespace:
    Description: The namespace of the Builder Vault
    Value: !Ref Namespace
  NodeAPIKey:
    Description: The API Key that you use to access your builder vault node
    Value: !Ref NodeAPIKey